#user  nginx;
#load_module /etc/nginx/modules/ngx_http_redis2_module.so;
worker_processes  1;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    gzip  on;

    server {
        listen       80;
        server_name  localhost;

        location /set/{
            default_type application/json;


            content_by_lua_block {
                local cjson = require "cjson"
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeouts(1000, 1000, 1000)
                local ok, err = red:connect("127.0.0.1",6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("1234567890:ase34bf7e6e3faaa58a","1234567890:ase34bf7e6e3faaa58aeyJhbGciOiJIUzI1NiJ9.dnsjdasjdas9021euwieapoadkasdn823fdbds_asda2343fdAVA.AVGaA_ipxfdB_zJs09yyik2r_IiAn0LlsM")
                ok, err = red:expire("1234567890:67bf7e6e3faaa58a",60)
                if not ok then
                    ngx.say("Token not created:", err)
                    return
                end
                ngx.say("set result: ", ok)
                -- ngx.header.content_type = "application/json; charset=utf-8"
                ngx.say(cjson.encode({ foo = "bar" }))
                return ngx.exit(ngx.HTTP_OK)
            }

        }

    location /login/ {
            default_type text/html;
            return 200 "<!DOCTYPE html><h2>Go to /set! to generate token</h2>\n";
        }

    location /{
            default_type text/html;

            content_by_lua_block{
                local cjson = require "cjson"
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeouts(1000, 1000, 1000)

                local ok, err = red:connect("127.0.0.1",6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:get("1234567890:67bf7e6e3faaa58a")
                ngx.log(ngx.STDERR, ok)
                if not ok then
                    ngx.say('Failed to process, please try again in some minutes.')
                    ngx.exit(401);
                end
                -- ngx.header.content_type = "application/json; charset=utf-8"
                ngx.say(cjson.encode({ url = ngx.var.request_uri,
                                        scheme = ngx.var.scheme,
                                        document_root= ngx.var.document_uri,
                                        device_id = ngx.req.get_headers()['DeviceId'],
                                        uid = ngx.req.get_headers()['UID'] }))
                return ngx.exit(ngx.HTTP_OK)
            }
            # proxy_pass http://127.0.0.1:5000/;
            # proxy_set_header Host $host;
            # proxy_pass http://127.0.0.1:5000/$1;

        }

      }

}
